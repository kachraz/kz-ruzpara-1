use anyhow::Result;
use chrono::{DateTime, Utc};
use openrouter_client::OpenRouterClient;
use std::fs;
use std::path::Path;

mod config;
mod models;
mod openrouter_client;

#[tokio::main]
async fn main() -> Result<()> {
    // Load environment variables from .env file if it exists
    let _ = dotenv::dotenv();

    println!("OpenRouter API Client - Prompt Processing");
    println!("========================================");

    // Read prompt from prompt.txt
    let prompt_path = "prompt.txt";
    if !Path::new(prompt_path).exists() {
        eprintln!("Error: prompt.txt file not found!");
        eprintln!("Please create a prompt.txt file with your question.");
        return Ok(());
    }

    let prompt = fs::read_to_string(prompt_path)?;
    let prompt = prompt.trim();

    if prompt.is_empty() {
        eprintln!("Error: prompt.txt is empty!");
        eprintln!("Please add your question to the prompt.txt file.");
        return Ok(());
    }

    println!("Prompt loaded from {}: {}", prompt_path, prompt);

    // Initialize the client
    let client = OpenRouterClient::new()?;

    // You can change the model here
    let selected_model = "mistralai/mistral-small-3.2-24b-instruct:free";

    println!("Sending request to model: {}", selected_model);

    // Send the request
    let response = client.send_chat_completion(selected_model, prompt).await?;

    println!("Response received!");

    // Create results directory if it doesn't exist
    fs::create_dir_all("results")?;

    // Generate filename with timestamp
    let now: DateTime<Utc> = Utc::now();
    let timestamp = now.format("%Y%m%d_%H%M%S");
    let filename = format!("results/response_{}.md", timestamp);

    // Create markdown content
    let markdown_content = format!(
        r#"# OpenRouter API Response

## Request Details
- **Model**: {}
- **Question**: {}
- **Date & Time**: {}

## Response

{}

---
*Generated by OpenRouter API Client*
"#,
        selected_model,
        prompt,
        now.format("%Y-%m-%d %H:%M:%S UTC"),
        response
    );

    // Write to file
    fs::write(&filename, markdown_content)?;

    println!("Results saved to: {}", filename);
    println!("Processing complete!");

    Ok(())
}
